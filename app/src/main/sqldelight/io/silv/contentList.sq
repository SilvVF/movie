import kotlin.Boolean;

CREATE TABLE contentList(
     _id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
     supabase_id TEXT,
     created_by TEXT,
     username TEXT NOT NULL DEFAULT "",
     description TEXT NOT NULL DEFAULT "",
     synced_at INTEGER,
     public INTEGER AS Boolean NOT NULL DEFAULT 0,
     name TEXT NOT NULL,
     last_modified_at INTEGER NOT NULL DEFAULT 0,
     poster_last_updated INTEGER,
     created_at INTEGER NOT NULL DEFAULT 0
);


CREATE TRIGGER deleteRecommedationsForList
AFTER DELETE ON contentList
FOR EACH ROW
BEGIN
  DELETE FROM recommendation
  WHERE recommendation.list_id = old._id;
END;

select:
SELECT * FROM contentList WHERE _id IN :ids;

insert:
INSERT OR IGNORE INTO contentList(_id, name, last_modified_at, poster_last_updated, created_at, supabase_id, created_by)
VALUES (
NULL,
:name,
strftime('%s', 'now'),
NULL,
:createdAt,
:supabaseId,
:createdBy
);

updatePublic:
UPDATE contentList SET
    public = COALESCE(:public, public)
WHERE _id = :id;

updateSupabase:
UPDATE contentList SET
    supabase_id = :supabaseId,
    created_by = :createdBy,
    public = COALESCE(:public, public),
    synced_at = strftime('%s', 'now')
WHERE _id = :id;

update:
UPDATE contentList SET
    name = COALESCE(:name, name),
    poster_last_updated = COALESCE(:posterLastUpdated, poster_last_updated)
WHERE _id = :id;

listCount:
SELECT COUNT(_id) FROM contentList;

delete:
DELETE FROM contentList WHERE _id = :id;

selectById:
SELECT * FROM contentList WHERE _id = :id LIMIT 1;

lastInsertRowId:
SELECT last_insert_rowid();

