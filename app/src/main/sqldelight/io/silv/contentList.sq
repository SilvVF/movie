import kotlin.Boolean;

CREATE TABLE contentList(
     _id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
     supabase_id TEXT,
     created_by TEXT,
     username TEXT NOT NULL DEFAULT "",
     description TEXT NOT NULL DEFAULT "",
     synced_at INTEGER,
     public INTEGER AS Boolean NOT NULL DEFAULT 0,
     name TEXT NOT NULL,
     last_modified_at INTEGER NOT NULL DEFAULT 0,
     poster_last_updated INTEGER,
     created_at INTEGER NOT NULL DEFAULT 0,
     in_library INTEGER AS Boolean NOT NULL DEFAULT 0
);

CREATE INDEX in_library_index ON contentList(in_library) WHERE in_library = 1;

CREATE TRIGGER delete_recommendation_for_list
AFTER DELETE ON contentList
FOR EACH ROW
BEGIN
  DELETE FROM recommendation
  WHERE recommendation.list_id = old._id;
END;

CREATE TRIGGER update_movie_and_show_in_library_list_trigger
AFTER UPDATE ON contentList
WHEN old.in_library <> new.in_library
BEGIN
    UPDATE movie SET
        in_library_list = new.in_library
    WHERE movie.id IN (
        SELECT DISTINCT movie_id FROM contentListJunction WHERE list_id = new._id AND movie_id != -1
    );
    UPDATE show SET
        in_library_list = new.in_library
    WHERE show.id IN (
       SELECT DISTINCT show_id FROM contentListJunction WHERE list_id = new._id AND show_id != -1
    );
END;


select:
SELECT * FROM contentList WHERE _id IN :ids;

insert:
INSERT OR IGNORE INTO contentList(_id, name, last_modified_at, poster_last_updated, created_at, supabase_id, created_by, in_library)
VALUES (
NULL,
:name,
strftime('%s', 'now'),
NULL,
:createdAt,
:supabaseId,
:createdBy,
:inLibrary
);

CREATE INDEX supabase_id_idx ON contentList(supabase_id);

updatePublic:
UPDATE contentList SET
    public = COALESCE(:public, public)
WHERE _id = :id;

updateSupabase:
UPDATE contentList SET
    supabase_id = :supabaseId,
    created_by = :createdBy,
    public = COALESCE(:public, public),
    synced_at = strftime('%s', 'now')
WHERE _id = :id;

update:
UPDATE contentList SET
    name = COALESCE(:name, name),
    poster_last_updated = COALESCE(:posterLastUpdated, poster_last_updated),
    description = COALESCE(:description, description),
    username = COALESCE(:username, username),
    in_library = COALESCE(:inLibrary, in_library)
WHERE _id = :id;

listCount:
SELECT COUNT(_id) FROM contentList;

selectBySupabaseId:
SELECT * FROM contentList WHERE supabase_id = :id LIMIT 1;

selectById:
SELECT * FROM contentList WHERE _id = :id LIMIT 1;


deleteById:
DELETE FROM contentList WHERE _id = :id;

lastInsertRowId:
SELECT last_insert_rowid();

