CREATE VIEW contentListView AS
SELECT
    cl._id AS list_id,
    cl.name AS list_name,
    cl.last_modified_at AS lastModified,
    clj.movie_id AS movieId,
    clj.show_id AS showId,
    COALESCE(m.title, s.title) AS title,
    COALESCE(m.poster_url, s.poster_url) AS posterUrl,
    COALESCE(m.poster_last_updated, s.poster_last_updated) AS posterLastUpdated,
    COALESCE(m.favorite, s.favorite) AS favorite
FROM
    contentList cl
LEFT JOIN
    contentListJunction clj ON cl._id = clj.list_id
LEFT JOIN
    movie m ON clj.movie_id = m.id
LEFT JOIN
    show s ON clj.show_id = s.id;

contentlist:
SELECT * FROM contentListView
WHERE
    contentListView.list_id IN (
        SELECT
            list_id
        FROM
            contentListJunction sub_clj
        LEFT JOIN
            movie sub_m ON sub_clj.movie_id = sub_m.id
        LEFT JOIN
            show sub_s ON sub_clj.show_id = sub_s.id
        WHERE
            sub_clj.list_id = contentListView.list_id
            AND (
                sub_m.title LIKE :query
                OR sub_s.title LIKE :query
                OR list_name LIKE :query
                OR :query = ''
            )
    )
    OR :query = ''  -- Include this condition to return all lists if the search query is empty
ORDER BY
    contentListView.list_id;


