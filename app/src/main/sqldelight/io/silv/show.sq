import kotlin.Boolean;
import kotlin.Int;
import kotlin.String;
import kotlin.collections.List;

CREATE TABLE show (
        id INTEGER PRIMARY KEY NOT NULL,
        title TEXT NOT NULL,
        overview TEXT NOT NULL ,
        genres TEXT AS List<String>,
        genreIds TEXT AS List<Int>,
        originalLanguage TEXT NOT NULL,
        voteCount INTEGER NOT NULL,
        releaseDate TEXT NOT NULL,
        posterUrl TEXT,
        posterLastUpdated INTEGER NOT NULL,
        favorite INTEGER AS Boolean NOT NULL,
        externalUrl TEXT NOT NULL,
        popularity REAL NOT NULL,
        status INTEGER
    );


    selectById:
    SELECT * FROM show WHERE id = :id LIMIT 1;

    selectAll:
    SELECT * FROM show;

    insert:
    INSERT OR IGNORE INTO show(id, title, overview, genres, genreIds, originalLanguage, voteCount, releaseDate, posterUrl, posterLastUpdated, favorite, externalUrl, popularity, status)
    VALUES (:id, :title,:overview,:genres, :genreIds,:originalLanguage,:voteCount,:releaseDate, :posterUrl, :posterLastUpdated, :favorite, :externalUrl, :popularity, :status);

    lastInsertRowId:
    SELECT last_insert_rowid();

    update:
    UPDATE show SET
        title = COALESCE(:title, title),
        overview = COALESCE(:overview, overview),
        genres = COALESCE(:genres, genres),
        genreIds = COALESCE(:genreIds, genreIds),
        originalLanguage = COALESCE(:originalLanguage, originalLanguage),
        voteCount = COALESCE(:voteCount, voteCount),
        releaseDate = COALESCE(:releaseDate, releaseDate),
        posterUrl = COALESCE(:posterUrl, posterUrl),
        posterLastUpdated = COALESCE(:posterLastUpdated, posterLastUpdated),
        favorite = COALESCE(:favorite, favorite),
        externalUrl = COALESCE(:externalUrl, externalUrl),
        popularity = COALESCE(:popularity, popularity),
        status = COALESCE(:status, status)
    WHERE id = :showId;



