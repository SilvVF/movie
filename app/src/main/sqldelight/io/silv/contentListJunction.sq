CREATE TABLE contentListJunction(
    movie_id INTEGER,
    show_id INTEGER,
    list_id INTEGER NOT NULL,
    created_at INTEGER NOT NULL DEFAULT 0,
    PRIMARY KEY(movie_id, show_id, list_id),
    FOREIGN KEY (movie_id) REFERENCES movie(id) ON DELETE CASCADE,
    FOREIGN KEY (show_id) REFERENCES show(id) ON DELETE CASCADE,
    FOREIGN KEY (list_id) REFERENCES contentList(_id) ON DELETE CASCADE
);

CREATE TRIGGER update_last_modified_at_list_insert
AFTER INSERT ON contentListJunction
FOR EACH ROW
BEGIN
  UPDATE contentList
  SET last_modified_at = strftime('%s', 'now')
  WHERE _id = new.list_id;
END;

CREATE TRIGGER update_last_modified_at_list_delete
AFTER DELETE ON contentListJunction
FOR EACH ROW
BEGIN
  UPDATE contentList
  SET last_modified_at = strftime('%s', 'now')
  WHERE _id = old.list_id;
END;

CREATE INDEX list_id_index ON contentListJunction(list_id);

insert:
INSERT OR IGNORE INTO contentListJunction(movie_id, show_id, list_id, created_at)
VALUES (:movieId, :showId, :listId, strftime('%s', 'now'));

deleteMovieFromList:
DELETE FROM contentListJunction WHERE movie_id = :movieId AND list_id = :listId;

deleteShowFromList:
DELETE FROM contentListJunction WHERE show_id = :showId AND list_id = :listId;

selectAll:
SELECT * FROM contentListJunction;

selectByListId:
SELECT
    clj.*,
    m.id AS movieId,
    s.id AS showId,
    COALESCE(m.title, s.title) AS title,
    COALESCE(m.poster_url, s.poster_url) AS posterUrl,
    COALESCE(m.poster_last_updated, s.poster_last_updated) AS posterLastUpdated,
    COALESCE(m.favorite, s.favorite) AS favorite,
    COALESCE(m.overview, s.overview) AS overview,
    COALESCE(m.popularity, s.popularity) AS popularity
FROM contentListJunction AS clj
LEFT JOIN movie AS m
ON m.id = clj.movie_id
LEFT JOIN show AS s
ON s.id = clj.show_id
WHERE list_id = :listId;

